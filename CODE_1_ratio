from PIL import Image, ImageDraw, ImageFont
import cv2
import numpy as np

def calculate_jewelry_size_and_position(face_x, face_y, face_width, face_height, face_type):
    # Khởi tạo giá trị mặc định
    earring_size = (int(face_width * 0.2), int(face_height * 0.3))
    necklace_size = (int(face_width * 1.2), int(face_height * 0.4))

    # Vị trí khuyên tai mặc định
    earring_left_pos = (face_x - int(face_width * 0.15), face_y + int(face_height * 0.3))
    earring_right_pos = (face_x + face_width - int(face_width * 0.05), face_y + int(face_height * 0.3))

    # Vị trí vòng cổ mặc định
    necklace_pos = (face_x - int(face_width * 0.1), face_y + face_height - int(face_height * 0.2))

    # Điều chỉnh theo loại khuôn mặt
    if face_type == "long":
        earring_size = (int(face_width * 0.15), int(face_height * 0.4))
        necklace_size = (int(face_width * 1.1), int(face_height * 0.3))
        necklace_pos = (face_x - int(face_width * 0.05), face_y + face_height - int(face_height * 0.15))

    elif face_type == "oval":
        earring_size = (int(face_width * 0.18), int(face_height * 0.28))
        necklace_size = (int(face_width * 1.2), int(face_height * 0.35))
        necklace_pos = (face_x - int(face_width * 0.08), face_y + face_height - int(face_height * 0.18))

    elif face_type == "round":
        earring_size = (int(face_width * 0.22), int(face_height * 0.32))
        necklace_size = (int(face_width * 1.3), int(face_height * 0.38))
        necklace_pos = (face_x - int(face_width * 0.12), face_y + face_height - int(face_height * 0.2))

    elif face_type == "square":
        earring_size = (int(face_width * 0.2), int(face_height * 0.3))
        necklace_size = (int(face_width * 1.25), int(face_height * 0.36))
        necklace_pos = (face_x - int(face_width * 0.1), face_y + face_height - int(face_height * 0.22))

    elif face_type == "triangle":
        earring_size = (int(face_width * 0.2), int(face_height * 0.35))
        necklace_size = (int(face_width * 1.15), int(face_height * 0.33))
        necklace_pos = (face_x - int(face_width * 0.09), face_y + face_height - int(face_height * 0.17))

    return earring_size, earring_left_pos, earring_right_pos, necklace_size, necklace_pos

def add_jewelry(frame_pil, face_x, face_y, face_width, face_height, face_type):
    jewelry_images = {
        "long": ("earring_long.png", "necklace_long.png"),
        "oval": ("earring_oval.png", "necklace_oval.png"),
        "round": ("earring_round.png", "necklace_round.png"),
        "square": ("earring_square.png", "necklace_square.png"),
        "triangle": ("earring_triangle.png", "necklace_triangle.png")
    }

    if face_type in jewelry_images:
        earring_file, necklace_file = jewelry_images[face_type]

        earring_img = Image.open(earring_file).convert('RGBA')
        necklace_img = Image.open(necklace_file).convert('RGBA')

        # Tính toán kích thước và vị trí theo loại khuôn mặt
        earring_size, earring_left_pos, earring_right_pos, necklace_size, necklace_pos = calculate_jewelry_size_and_position(
            face_x, face_y, face_width, face_height, face_type
        )

        # Resize khuyên tai và vòng cổ
        earring_left = earring_img.resize(earring_size)
        earring_right = earring_img.resize(earring_size)
        necklace_resized = necklace_img.resize(necklace_size)

        # Thêm khuyên tai lên khuôn mặt
        frame_pil.paste(earring_left, earring_left_pos, earring_left)
        frame_pil.paste(earring_right, earring_right_pos, earring_right)

        # Thêm vòng cổ lên khuôn mặt
        frame_pil.paste(necklace_resized, necklace_pos, necklace_resized)

    return frame_pil

def classify_face_shape(width, height):
    ratio = width / height
    if ratio < 0.8:
        return "Khuôn mặt dài", "Trang sức thanh mảnh, dây chuyền dài", "Bạc hoặc vàng trắng", "long"
    elif ratio < 1.0:
        return "Khuôn mặt trái xoan", "Trang sức cân đối, kiểu dáng đơn giản", "Vàng, kim cương hoặc ngọc trai", "oval"
    elif ratio < 1.2:
        return "Khuôn mặt tròn", "Trang sức góc cạnh, giúp tạo hiệu ứng thon gọn", "Bạc, đá quý hình oval hoặc vuông", "round"
    elif ratio < 1.4:
        return "Khuôn mặt vuông", "Trang sức mềm mại, đường cong để làm dịu nét góc cạnh", "Ngọc trai, đá tròn hoặc hình giọt nước", "square"
    else:
        return "Khuôn mặt tam giác", "Trang sức tập trung vào phần dưới, bông tai dài", "Vàng hồng, ngọc bích hoặc đá quý màu sắc nhẹ", "triangle"

# Thêm gọi hàm add_jewelry() vào vòng lặp chính
def suggest_jewelry():
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        print("Không thể mở webcam")
        return

    font_path = "arial.ttf"
    try:
        font = ImageFont.truetype(font_path, 20)
    except:
        print("Không tìm thấy font. Hãy tải font và cập nhật đường dẫn.")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Không thể nhận frame từ webcam")
            break

        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        frame_pil = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(frame_pil)

        for (face_x, face_y, face_width, face_height) in faces:
            # Vẽ hình chữ nhật bao quanh khuôn mặt
            cv2.rectangle(frame, (face_x, face_y), (face_x + face_width, face_y + face_height), (0, 255, 0), 2)

            # Phân loại khuôn mặt và gợi ý trang sức
            # Trong vòng lặp chính:
            face_shape, jewelry_suggestion, material_suggestion, face_type = classify_face_shape(face_width,
                                                                                                 face_height)
            suggestion_text = f"{face_shape}\n{jewelry_suggestion}\nVật liệu: {material_suggestion}"
            draw.text((face_x, face_y - 60), suggestion_text, font=font, fill=(255, 255, 255, 255))

            # Gọi hàm thêm trang sức tương ứng
            frame_pil = add_jewelry(frame_pil, face_x, face_y, face_width, face_height, face_type)

        frame = cv2.cvtColor(np.array(frame_pil), cv2.COLOR_RGB2BGR)
        cv2.imshow('Đề xuất trang sức phù hợp', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    suggest_jewelry()
